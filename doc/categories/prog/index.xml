<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prog on hiroyuki_tの日記</title>
    <link>http://d.tflare.com/categories/prog/</link>
    <description>Recent content in Prog on hiroyuki_tの日記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright (c) 2006 - 2016, hiroyuki_tの日記</copyright>
    <lastBuildDate>Fri, 13 Apr 2012 22:09:56 +0000</lastBuildDate>
    <atom:link href="http://d.tflare.com/categories/prog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SubversionからGitに移行</title>
      <link>http://d.tflare.com/2012/04/14/070956/</link>
      <pubDate>Fri, 13 Apr 2012 22:09:56 +0000</pubDate>
      
      <guid>http://d.tflare.com/2012/04/14/070956/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    公開できる品質ではないソースを
  &lt;/p&gt;
  
  &lt;p&gt;
    git-svnを使用してSubversionからGitに移行し、Bitbucketにprivateで上げた。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    テストとして、GitHubにソースを上げたかったので、
  &lt;/p&gt;
  
  &lt;p&gt;
    古いソース（2005年）をGitHubに上げた。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://github.com/tflare&#34; target=&#34;_blank&#34;&gt;https://github.com/tflare&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>バージョン管理システムのホスティングサービスBitbucket</title>
      <link>http://d.tflare.com/2012/04/12/195252/</link>
      <pubDate>Thu, 12 Apr 2012 10:52:52 +0000</pubDate>
      
      <guid>http://d.tflare.com/2012/04/12/195252/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    &lt;a href=&#34;https://bitbucket.org/&#34; target=&#34;_blank&#34;&gt;https://bitbucket.org/&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    5 ユーザーまでであれば、リポジトリが無制限に作成できる。（プライベートレポジトリでも）
  &lt;/p&gt;
  
  &lt;p&gt;
    GitHubの場合、プライベートレポジトリを作ろうとすると、月に7ドルかかるのと違い（7ドルで5個まで）
  &lt;/p&gt;
  
  &lt;p&gt;
    5 ユーザーまでであれば無料なのがうれしい。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    SubversionからGitに移行した上での、
  &lt;/p&gt;
  
  &lt;p&gt;
    Bitbucketへの登録を検討します。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>1日毎に自動更新するページを静的に見せかけ、60倍速く表示する方法</title>
      <link>http://d.tflare.com/2011/01/19/174514/</link>
      <pubDate>Wed, 19 Jan 2011 08:45:14 +0000</pubDate>
      
      <guid>http://d.tflare.com/2011/01/19/174514/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    動的にページを生成すると、ページの表示が遅い。
  &lt;/p&gt;
  
  &lt;p&gt;
    静的に作れば速いが、定期的なページの更新が煩雑になる。
  &lt;/p&gt;
  
  &lt;p&gt;
    このため、動的にページを生成し、静的に見せかけ、速く表示できる方法を考えたので個人的なメモとして残す。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    今回の場合、ページの更新間隔を1日としているが変更は容易に可能
  &lt;/p&gt;
  
  &lt;p&gt;
    環境:さくらのスタンダード
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    .htaccessの設定とプログラミング言語（ここではruby）とcronの連携で実現する。
  &lt;/p&gt;
  
  &lt;h4&gt;
    手順
  &lt;/h4&gt;
  
  &lt;p&gt;
    1. mod_rewriteでURLを書き換える。
  &lt;/p&gt;
  
  &lt;p&gt;
    2. 上記の際存在するファイルは対象にしないようにしておく。
  &lt;/p&gt;
  
  &lt;p&gt;
    3. アクセスがあった際に、プログラム言語で1の書き換え前のパスに生成したhtmlを作成する。
  &lt;/p&gt;
  
  &lt;p&gt;
    4. cronで3で作成したファイルを定期的に削除（今回は1日毎に実行するようにしておく。）
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    上記により一度作成したファイルがあればそれをプラウザで表示
  &lt;/p&gt;
  
  &lt;p&gt;
    なければcgi実行をするようになる。
  &lt;/p&gt;
  
  &lt;p&gt;
    プラウザで表示させることにより、プログラムを介在させなくてよくなり高速に表示されるようになる。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;h4&gt;
    .htaccess
  &lt;/h4&gt;
  
  &lt;p&gt;
    index.htmlも生成対象としたいので
  &lt;/p&gt;
  
  &lt;p&gt;
    優先順位をindex.html index.cgiの順番とする。
  &lt;/p&gt;
  
  &lt;p&gt;
    これによりindex.htmlがない場合のみ、index.cgiを実行することになる。
  &lt;/p&gt;
  
  &lt;p&gt;
    これとプログラムでのindex.htmlの作成、手順4を組み合わせ実現する。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    RewriteCond %{REQUEST_FILENAME} !-fで
  &lt;/p&gt;
  
  &lt;p&gt;
    存在するファイルは対象にしないようにする。
  &lt;/p&gt;
  
  &lt;pre&gt;
DirectoryIndex index.html index.cgi .ht
RewriteEngine on
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^&amp;#34;キャッシュフォルダ名&amp;#34;&amp;#92;/(&amp;#91;0-9A-Za-z]+).html$ index.cgi?a=g&amp;#38;s=$1 &amp;#91;L]
&lt;/pre&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;h4&gt;
    ruby
  &lt;/h4&gt;
  
  &lt;p&gt;
    以下のようなコードを作っておいて
  &lt;/p&gt;
  
  &lt;p&gt;
    ruby内でhtmlを生成し終わったら実行
  &lt;/p&gt;
  
  &lt;p&gt;
    あとで見たら、railsのcache_pageで同じようなことをやっているので
  &lt;/p&gt;
  
  &lt;p&gt;
    コード的にはそちらを参考にしたほうが良い。
  &lt;/p&gt;
  
  &lt;p&gt;
    見た記事:&lt;a href=&#34;http://gihyo.jp/dev/feature/01/rails2/0004?page=5&#34; target=&#34;_blank&#34;&gt;第4回　Railsアプリケーションをもっと速く&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    上記によると約60倍の性能となるようだ。
  &lt;/p&gt;
  
  &lt;pre class=&#34;syntax-highlight&#34;&gt;
&lt;span class=&#34;synPreProc&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;cache_page&lt;/span&gt;(path, cash_content)
root = &lt;span class=&#34;synIdentifier&#34;&gt;File&lt;/span&gt;::dirname(&lt;span class=&#34;synConstant&#34;&gt;__FILE__&lt;/span&gt;)
path = root + path
&lt;span class=&#34;synStatement&#34;&gt;begin&lt;/span&gt;
&lt;span class=&#34;synIdentifier&#34;&gt;File&lt;/span&gt;::open(path, &lt;span class=&#34;synSpecial&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;synConstant&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span class=&#34;synStatement&#34;&gt;do&lt;/span&gt; |&lt;span class=&#34;synIdentifier&#34;&gt;cash_file&lt;/span&gt;|
cash_file.write(cash_content)
&lt;span class=&#34;synStatement&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;synStatement&#34;&gt;rescue&lt;/span&gt;
&lt;span class=&#34;synStatement&#34;&gt;raise&lt;/span&gt;
&lt;span class=&#34;synStatement&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;synPreProc&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;h4&gt;
    cron
  &lt;/h4&gt;
  
  &lt;p&gt;
    &amp;#8220;ユーザ名&amp;#8221;、&amp;#8221;キャッシュフォルダ名&amp;#8221;は環境ごとに変更すること
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;#8220;キャッシュフォルダ名&amp;#8221;は.htaccessと合わせること
  &lt;/p&gt;
  
  &lt;pre class=&#34;syntax-highlight&#34;&gt;
&lt;span class=&#34;synComment&#34;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&#34;synIdentifier&#34;&gt;PATH&lt;/span&gt;=/bin:/usr/bin:/sbin:/usr/sbin:/usr/&lt;span class=&#34;synStatement&#34;&gt;local&lt;/span&gt;/bin
&lt;span class=&#34;synStatement&#34;&gt;rm&lt;/span&gt; /home/&lt;span class=&#34;synStatement&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;ユーザ名&lt;/span&gt;&lt;span class=&#34;synStatement&#34;&gt;&amp;#34;&lt;/span&gt;/www/&lt;span class=&#34;synStatement&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;キャッシュフォルダ名&lt;/span&gt;&lt;span class=&#34;synStatement&#34;&gt;&amp;#34;&lt;/span&gt;/*
&lt;span class=&#34;synStatement&#34;&gt;rm&lt;/span&gt; /home/&lt;span class=&#34;synStatement&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;ユーザ名&lt;/span&gt;&lt;span class=&#34;synStatement&#34;&gt;&amp;#34;&lt;/span&gt;/www/index.html
&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RabbitVCSとFileZilla</title>
      <link>http://d.tflare.com/2011/01/14/222923/</link>
      <pubDate>Fri, 14 Jan 2011 13:29:23 +0000</pubDate>
      
      <guid>http://d.tflare.com/2011/01/14/222923/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    RabbitVCSはLinux用TortoiseSVN風のバージョン管理システム
  &lt;/p&gt;
  
  &lt;p&gt;
    昔TortoiseSVNを使っていたので、TortoiseSVNがないと開発がやりたくない状態になっていた。
  &lt;/p&gt;
  
  &lt;p&gt;
    最近rubyでの開発を再開したのでLinux用のバージョン管理システムを探していたところ
  &lt;/p&gt;
  
  &lt;p&gt;
    RabbitVCSを発見した。
  &lt;/p&gt;
  
  &lt;p&gt;
    これで開発が存分にできる。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    それとftpツールはFileZillaを使うように変更した。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ECMAScript 3版→5版　改訂メモ2(Object Objects)</title>
      <link>http://d.tflare.com/2009/12/26/160634/</link>
      <pubDate>Sat, 26 Dec 2009 07:06:34 +0000</pubDate>
      
      <guid>http://d.tflare.com/2009/12/26/160634/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    15.2 Object Objectsのメモ
  &lt;/p&gt;
  
  &lt;p&gt;
    以下が追加されている
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.2 Object.getPrototypeOf ( O )
  &lt;/h4&gt;
  
  &lt;p&gt;
    オブジェクトのプロトタイプを取得
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.3 Object.getOwnPropertyDescriptor ( O, P )
  &lt;/h4&gt;
  
  &lt;p&gt;
    Pのプロトタイプ情報を取得
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.4 Object.getOwnPropertyNames ( O )
  &lt;/h4&gt;
  
  &lt;p&gt;
    オブジェクトのプロパティを取得
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.5 Object.create ( O [, Properties] )
  &lt;/h4&gt;
  
  &lt;p&gt;
    既存オブジェクトをプロパティとして新しいオブジェクトを生成
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.6 Object.defineProperty ( O, P, Attributes )
  &lt;/h4&gt;
  
  &lt;p&gt;
    オブジェクトのプロパティを設定する。
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.7 Object.defineProperties ( O, Properties )
  &lt;/h4&gt;
  
  &lt;p&gt;
    オブジェクトのプロパティを設定する。
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.8 Object.seal ( O )
  &lt;/h4&gt;
  
  &lt;p&gt;
    オブジェクトのプロパティの追加、削除をできないようにする。
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.9 Object.freeze ( O )
  &lt;/h4&gt;
  
  &lt;p&gt;
    オブジェクトのプロパティの追加、変更、削除をできないようにする。
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.10 Object.preventExtensions ( O )
  &lt;/h4&gt;
  
  &lt;p&gt;
    オブジェクトのプロパティの追加をできないようにする。
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.11 Object.isSealed ( O )
  &lt;/h4&gt;
  
  &lt;p&gt;
    以下すべてを満たす時true、それ以外はfalseを返す
  &lt;/p&gt;
  
  &lt;p&gt;
    オブジェクトのすべてのプロパティが削除できない
  &lt;/p&gt;
  
  &lt;p&gt;
    オブジェクトのプロパティの追加ができない
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.12 Object.isFrozen ( O )
  &lt;/h4&gt;
  
  &lt;p&gt;
    以下すべてを満たす時true、それ以外はfalseを返す
  &lt;/p&gt;
  
  &lt;p&gt;
    オブジェクトのすべてのプロパティが変更、削除できない
  &lt;/p&gt;
  
  &lt;p&gt;
    オブジェクトのプロパティの追加ができない
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.13 Object.isExtensible ( O )
  &lt;/h4&gt;
  
  &lt;p&gt;
    以下の時trueそれ以外はfalseを返す
  &lt;/p&gt;
  
  &lt;p&gt;
    オブジェクトのプロパティの追加ができない
  &lt;/p&gt;
  
  &lt;h4&gt;
    15.2.3.14 Object.keys ( O )
  &lt;/h4&gt;
  
  &lt;p&gt;
    オブジェクトのenumerableなプロパティを返す
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ECMAScript 3版→5版　改訂メモ1</title>
      <link>http://d.tflare.com/2009/12/25/103045/</link>
      <pubDate>Fri, 25 Dec 2009 01:30:45 +0000</pubDate>
      
      <guid>http://d.tflare.com/2009/12/25/103045/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    1から10.2まで変更点について気づいた所をメモ
  &lt;/p&gt;
  
  &lt;p&gt;
    初めの方なので内部的な所が多い。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;h4&gt;
    2 Conformance
  &lt;/h4&gt;
  
  &lt;p&gt;
    Unicode 2.1 以降 → Unicode 3.0 以降
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;h4&gt;
    7.6.1.2 Future Reserved Words
  &lt;/h4&gt;
  
  &lt;p&gt;
    Future Reserved Wordsが減ってる。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    abstract　enum　int　short　boolean　export　interface　static　byte　extends　long　super　char　final　native　synchronized　class　float　package　throws　const　goto　private　transient　debugger　implements　protected　volatile　double　import　public
  &lt;/p&gt;
  
  &lt;p&gt;
    ↓
  &lt;/p&gt;
  
  &lt;p&gt;
    class　enum　extends　super　const　export　import
  &lt;/p&gt;
  
  &lt;p&gt;
    strict mode:implements　let　private　public　yield　interface　package　protected　static
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;h4&gt;
    8.6.1 Property Attributes
  &lt;/h4&gt;
  
  &lt;p&gt;
    Attributes of a Named Data Property
  &lt;/p&gt;
  
  &lt;p&gt;
    Value追加
  &lt;/p&gt;
  
  &lt;p&gt;
    ReadOnly→Writable
  &lt;/p&gt;
  
  &lt;p&gt;
    DontEnum→Enumerable
  &lt;/p&gt;
  
  &lt;p&gt;
    DontDelete→Configurable
  &lt;/p&gt;
  
  &lt;p&gt;
    Internal削除
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Attributes of a Named Accessor Property
  &lt;/p&gt;
  
  &lt;p&gt;
    Get追加
  &lt;/p&gt;
  
  &lt;p&gt;
    Set追加
  &lt;/p&gt;
  
  &lt;p&gt;
    Enumerable追加
  &lt;/p&gt;
  
  &lt;p&gt;
    Configurable追加
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;h4&gt;
    8.6.2 Internal Properties and Methods
  &lt;/h4&gt;
  
  &lt;p&gt;
    Table 8 &amp;#8212; Internal Properties Common to All Objects
  &lt;/p&gt;
  
  &lt;p&gt;
    Extensible追加
  &lt;/p&gt;
  
  &lt;p&gt;
    GetOwnProperty追加
  &lt;/p&gt;
  
  &lt;p&gt;
    GetProperty追加
  &lt;/p&gt;
  
  &lt;p&gt;
    DefineOwnProperty追加
  &lt;/p&gt;
  
  &lt;p&gt;
    Value削除→代わりにTable 9にPrimitiveValue追加
  &lt;/p&gt;
  
  &lt;p&gt;
    Construct→Table 9
  &lt;/p&gt;
  
  &lt;p&gt;
    Call→Table 9
  &lt;/p&gt;
  
  &lt;p&gt;
    HasInstance→Table 9
  &lt;/p&gt;
  
  &lt;p&gt;
    Scope→Table 9
  &lt;/p&gt;
  
  &lt;p&gt;
    Match→Table 9
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Table 9 &amp;#8212; Internal Properties Only Defined for Some Objects
  &lt;/p&gt;
  
  &lt;p&gt;
    PrimitiveValue追加
  &lt;/p&gt;
  
  &lt;p&gt;
    FormalParameters追加
  &lt;/p&gt;
  
  &lt;p&gt;
    Code追加
  &lt;/p&gt;
  
  &lt;p&gt;
    TargetFunction追加
  &lt;/p&gt;
  
  &lt;p&gt;
    BoundThis追加
  &lt;/p&gt;
  
  &lt;p&gt;
    BoundArguments追加
  &lt;/p&gt;
  
  &lt;p&gt;
    ParameterMap追加
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;h4&gt;
    8.7 The Reference Type
  &lt;/h4&gt;
  
  &lt;p&gt;
    GetReferencedName(V)追加
  &lt;/p&gt;
  
  &lt;p&gt;
    IsStrictReference(V)追加
  &lt;/p&gt;
  
  &lt;p&gt;
    HasPrimitiveBase(V)追加
  &lt;/p&gt;
  
  &lt;p&gt;
    IsPropertyReference(V)追加
  &lt;/p&gt;
  
  &lt;p&gt;
    IsUnresolvableReference(V)追加
  &lt;/p&gt;
  
  &lt;p&gt;
    GetPropertyName(V)削除
  &lt;/p&gt;
  
  &lt;p&gt;
    8.7.1 GetValue (V)変更
  &lt;/p&gt;
  
  &lt;p&gt;
    8.7.2 PutValue (V, W)変更
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;h4&gt;
    8.10 The Property Descriptor and Property Identifier Specification Types以下追加
  &lt;/h4&gt;
  
  &lt;h4&gt;
    9.10 CheckObjectCoercible追加
  &lt;/h4&gt;
  
  &lt;h4&gt;
    9.11 IsCallable追加
  &lt;/h4&gt;
  
  &lt;h4&gt;
    9.12 The SameValue Algorithm追加
  &lt;/h4&gt;
  
  &lt;h4&gt;
    10.1.1 Function Objects削除
  &lt;/h4&gt;
  
  &lt;h4&gt;
    10.1.1 Strict Mode Code追加
  &lt;/h4&gt;
  
  &lt;h4&gt;
    10.2 Lexical Environments追加
  &lt;/h4&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ECMAScript 5</title>
      <link>http://d.tflare.com/2009/12/20/233325/</link>
      <pubDate>Sun, 20 Dec 2009 14:33:25 +0000</pubDate>
      
      <guid>http://d.tflare.com/2009/12/20/233325/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    細かくは見てないけど大きな変更があまりないように思う。
  &lt;/p&gt;
  
  &lt;p&gt;
    大きな変更はStrict ModeとJSON supportとArray methodsの追加ぐらいか
  &lt;/p&gt;
  
  &lt;p&gt;
    ただ以下とか細かい所が改善されているようなので
  &lt;/p&gt;
  
  &lt;p&gt;
    後で見ておこう。
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      15.1.1: The value properties NaN, Infinity, and undefined of the Global Object have been changed to be read-only properties.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.infoq.com/jp/news/2009/12/ecmascript5&#34; target=&#34;_blank&#34;&gt;ECMAScript 5リリース&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://ejohn.org/blog/ecmascript-5-objects-and-properties/&#34; target=&#34;_blank&#34;&gt;ECMAScript 5 Objects and Properties&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/&#34; target=&#34;_blank&#34;&gt;ECMAScript 5 Strict Mode, JSON, and More&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    JSON supportは応用性が広がりそう
  &lt;/p&gt;
  
  &lt;p&gt;
    Array methodsはJavaScript 1.6で採用されているものだが地味に便利なものが揃っているのでうれしい。
  &lt;/p&gt;
  
  &lt;p&gt;
    今までがたりなかっただけのような気もするが。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://developer.mozilla.org/en/New_in_JavaScript_1.6#Array_extras&#34; target=&#34;_blank&#34;&gt;New in JavaScript 1.6&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    あまり大きな変更がないので
  &lt;/p&gt;
  
  &lt;p&gt;
    それだけブラウザへの採用も早いとうれしい。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Web用テストツールmemo</title>
      <link>http://d.tflare.com/2006/08/26/113436/</link>
      <pubDate>Sat, 26 Aug 2006 02:34:36 +0000</pubDate>
      
      <guid>http://d.tflare.com/2006/08/26/113436/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    Selenium
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.openqa.org/selenium/&#34; target=&#34;_blank&#34;&gt;http://www.openqa.org/selenium/&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Selenium 0.7利用手順書（前編）
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://codezine.jp/a/article.aspx?aid=436&#34; target=&#34;_blank&#34;&gt;http://codezine.jp/a/article.aspx?aid=436&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Selenium使うんならSeleniumIDEは必須だよね。
  &lt;/p&gt;
  
  &lt;p&gt;
    SeleniumIDEはFirefoxにしか対応していないから
  &lt;/p&gt;
  
  &lt;p&gt;
    InternetExploreじゃないと動作しないシステムの場合困るんだよね。
  &lt;/p&gt;
  
  &lt;p&gt;
    社内用のシステムでありがちなんだけど
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Sahi &amp;#8211; Web Automation and Test Tool
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://sahi.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;http://sahi.sourceforge.net/&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    WebUnit ブラウザを使用せずにテストするツールRuby用
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.xpenguin.biz/download/webunit/index-ja.html&#34; target=&#34;_blank&#34;&gt;http://www.xpenguin.biz/download/webunit/index-ja.html&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Apache JMeter　負荷テスト用だけど機能テストでも一応使える
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://jakarta.apache.org/jmeter/&#34; target=&#34;_blank&#34;&gt;http://jakarta.apache.org/jmeter/&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    JMeter(高機能/フリーなテストツール)
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.stackasterisk.jp/tech/engineer/jmeter01_01.jsp&#34; target=&#34;_blank&#34;&gt;http://www.stackasterisk.jp/tech/engineer/jmeter01_01.jsp&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Jameleon
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://jameleon.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;http://jameleon.sourceforge.net/&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    オープンソースの自動化テストツール「Jameleon」の概要
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/0601/12/news001.html&#34; target=&#34;_blank&#34;&gt;http://www.itmedia.co.jp/enterprise/articles/0601/12/news001.html&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    WWW-Mechanize
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://search.cpan.org/dist/WWW-Mechanize/&#34; target=&#34;_blank&#34;&gt;http://search.cpan.org/dist/WWW-Mechanize/&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Perlモジュール/WWW::Mechanize &amp;#8211; Walrus, Digit.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://digit.que.ne.jp/work/index.cgi?Perl%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%2FWWW%3A%3AMechanize&#34; target=&#34;_blank&#34;&gt;http://digit.que.ne.jp/work/index.cgi?Perl%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%2FWWW%3A%3AMechanize&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Canoo WebTest 2.0
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://webtest.canoo.com/webtest/manual/WebTestHome.html&#34; target=&#34;_blank&#34;&gt;http://webtest.canoo.com/webtest/manual/WebTestHome.html&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Webアプリを自動的にテスト、Canoo WebTest 2.0 登場
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://journal.mycom.co.jp/news/2006/03/17/341.html&#34; target=&#34;_blank&#34;&gt;http://journal.mycom.co.jp/news/2006/03/17/341.html&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    IEの遠隔操作用ライブラリmechanize.js
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://la.ma.la/blog/diary_200607121903.htm&#34; target=&#34;_blank&#34;&gt;http://la.ma.la/blog/diary_200607121903.htm&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    IEナビトレ
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.vector.co.jp/soft/win95/net/se299115.html&#34; target=&#34;_blank&#34;&gt;http://www.vector.co.jp/soft/win95/net/se299115.html&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    送信するPOSTデータやCookieを保存したり、動的に編集できるツール
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    FairyTrace
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.vector.co.jp/soft/win95/util/se219079.html&#34; target=&#34;_blank&#34;&gt;http://www.vector.co.jp/soft/win95/util/se219079.html&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    windows用（シェアウエア）
  &lt;/p&gt;
  
  &lt;p&gt;
    マウスの操作等を記録する。
  &lt;/p&gt;
  
  &lt;p&gt;
    少し使ってたことがあるんだけど
  &lt;/p&gt;
  
  &lt;p&gt;
    画面が少しずれたりしただけで、使えなくなったりする。
  &lt;/p&gt;
  
  &lt;p&gt;
    （座標を記録しているのだから当たり前だけど）
  &lt;/p&gt;
  
  &lt;p&gt;
    当時の用途としてマウスの座標を記録したりするタイプだと
  &lt;/p&gt;
  
  &lt;p&gt;
    ちょっと厳しいと思い。使うのをやめた。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    WinRunner
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.mercury.com/jp/products/quality-center/functional-testing/winrunner/&#34; target=&#34;_blank&#34;&gt;http://www.mercury.com/jp/products/quality-center/functional-testing/winrunner/&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    QuickTest ProfessionalとWinRunnerの機能的な違い
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.ashisuto.co.jp/prod/qtp/sum/info/index.html&#34; target=&#34;_blank&#34;&gt;http://www.ashisuto.co.jp/prod/qtp/sum/info/index.html&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    WinRunnerかQuickTest Professionalか忘れたけど、
  &lt;/p&gt;
  
  &lt;p&gt;
    テスト結果を見るためにもライセンスが必要だったような気がする。
  &lt;/p&gt;
  
  &lt;p&gt;
    それなのにQuickTest Professionalのライセンスは以下のとおりの値段。
  &lt;/p&gt;
  
  &lt;p&gt;
    高すぎて使えませんよ。
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      クライアント/サーバー（C/S）ベースのフローティング1ユーザー・ライセンスで139万円から。
    &lt;/p&gt;
    
    &lt;p&gt;
      &lt;a href=&#34;http://itpro.nikkeibp.co.jp/free/NSW/NEWS/20030507/1/&#34; target=&#34;_blank&#34;&gt;http://itpro.nikkeibp.co.jp/free/NSW/NEWS/20030507/1/&lt;/a&gt;
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    WebKing
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.parasoft.com/jsp/ja/products/webking.jsp&#34; target=&#34;_blank&#34;&gt;http://www.parasoft.com/jsp/ja/products/webking.jsp&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    1ライセンスで448,000円ぐらい？
  &lt;/p&gt;
  
  &lt;p&gt;
    よく知らない。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Rational Robot
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www-06.ibm.com/jp/software/rational/products/test/robot/&#34; target=&#34;_blank&#34;&gt;http://www-06.ibm.com/jp/software/rational/products/test/robot/&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Floating Userで1,190,700円
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>第6回オープンソーステクノロジー勉強会内容</title>
      <link>http://d.tflare.com/2006/08/25/000000/</link>
      <pubDate>Thu, 24 Aug 2006 15:00:00 +0000</pubDate>
      
      <guid>http://d.tflare.com/2006/08/25/000000/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    第6回オープンソーステクノロジー勉強会にいってきました。
  &lt;/p&gt;
  
  &lt;p&gt;
    内容と自分の作っているテストツールについて
  &lt;/p&gt;
  
  &lt;p&gt;
    Seleniumには以下の物があるよ。
  &lt;/p&gt;
  
  &lt;p&gt;
    Selenium Core
  &lt;/p&gt;
  
  &lt;p&gt;
    Selenium IDE
  &lt;/p&gt;
  
  &lt;p&gt;
    Selenium Remote Control
  &lt;/p&gt;
  
  &lt;p&gt;
    Selenium Coreではテストを書くのがめんどくさいからSelenium IDEがあり、
  &lt;/p&gt;
  
  &lt;p&gt;
    Selenium Coreでは定時にテストを実行することが出来ないのでSelenium Remote Controlがある。
  &lt;/p&gt;
  
  &lt;p&gt;
    後、テストの実行結果の一覧化をしているのを見て、
  &lt;/p&gt;
  
  &lt;p&gt;
    テストを定時に行うのであれば、実行結果の一覧を用意すると便利だと思った。
  &lt;/p&gt;
  
  &lt;p&gt;
    Selenium IDEは拡張機能を使えばAJAXにも対応できる。
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;nbsp;
  &lt;/p&gt;
  
  &lt;p&gt;
    面白かった。
  &lt;/p&gt;
  
  &lt;p&gt;
    やる気が出てきた。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>自分の作っているテストツールについて</title>
      <link>http://d.tflare.com/2006/08/25/000000/</link>
      <pubDate>Thu, 24 Aug 2006 15:00:00 +0000</pubDate>
      
      <guid>http://d.tflare.com/2006/08/25/000000/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    自動テストには環境整備が重要
  &lt;/p&gt;
  
  &lt;p&gt;
    自動テストする際にテーブルを全部削除するとか
  &lt;/p&gt;
  
  &lt;p&gt;
    Railsのフィクスチャを使うとかいう話が出てるけど
  &lt;/p&gt;
  
  &lt;p&gt;
    そういうことがやりたくても、自分が今いる環境ではそういうことが出来ない。
  &lt;/p&gt;
  
  &lt;p&gt;
    仕方ないので初回用と2回目以降用のテストケースを作って切り替えるということをしている。
  &lt;/p&gt;
  
  &lt;p&gt;
    やろうとすれば、すべて初回扱いにも出来るのだけど、
  &lt;/p&gt;
  
  &lt;p&gt;
    ・テスト用とはいえ、データを作りすぎるとまずい（簡単に削除できないので）
  &lt;/p&gt;
  
  &lt;p&gt;
    ・テストの実行時間の問題
  &lt;/p&gt;
  
  &lt;p&gt;
    があるかと思い初回用と2回目以降用のテストケースを用意している。
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;nbsp;
  &lt;/p&gt;
  
  &lt;p&gt;
    テストを作成するのにはSeleniumを使っているのではなく
  &lt;/p&gt;
  
  &lt;p&gt;
    ExcelのVBAで作っている。
  &lt;/p&gt;
  
  &lt;p&gt;
    なぜかというと今常駐している会社では、フリーソフトが使えないから、
  &lt;/p&gt;
  
  &lt;p&gt;
    そこら辺にあるものを使うしかなくExcelのVBAで作っている。
  &lt;/p&gt;
  
  &lt;p&gt;
    ExcelのVBAで命令セットを作って、
  &lt;/p&gt;
  
  &lt;p&gt;
    Excelのシートからその命令を呼び出すという風にしている。
  &lt;/p&gt;
  
  &lt;p&gt;
    たとえばMenuClick命令というのがあってこれを呼び出すと、メニューを押すことが出来る。
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;nbsp;
  &lt;/p&gt;
  
  &lt;p&gt;
    ExcelのVBAで作っているためWindowsのAPIを簡単に呼び出すことが可能。
  &lt;/p&gt;
  
  &lt;p&gt;
    画面のハードコピーを撮ってと言われても、簡単に画面のハードコピーを撮ることが出来る。
  &lt;/p&gt;
  
  &lt;p&gt;
    自分的には自動テストには画面のハードコピーは重要だと思わないけど好きな人はいるので仕方ない。
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;nbsp;
  &lt;/p&gt;
  
  &lt;p&gt;
    auto_screen_modeというのもあって
  &lt;/p&gt;
  
  &lt;p&gt;
    auto_screen_modeをonにしてMenuClick命令等で画面を遷移させると、
  &lt;/p&gt;
  
  &lt;p&gt;
    勝手に開いている画面をすべて画面に撮って、Excelのシートに貼り付けたり出来る。
  &lt;/p&gt;
  
  &lt;p&gt;
    （一画面に収まらないときは自動でスクロールして画面を取ってくれる。）
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;nbsp;
  &lt;/p&gt;
  
  &lt;p&gt;
    まあそれなりに命令セットがあって使えるんだけど、
  &lt;/p&gt;
  
  &lt;p&gt;
    テストを書くのがめんどくさいという問題点がある。
  &lt;/p&gt;
  
  &lt;p&gt;
    それを改善すべく、スクリプト生成ソフトを作ろうと考えてはいるのだが。
  &lt;/p&gt;
  
  &lt;p&gt;
    スクリプト生成ソフトを作るのにrubyが使いたいのだけど、rubyは入れられないので困っていたりする。
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;nbsp;
  &lt;/p&gt;
  
  &lt;p&gt;
    まあ現状でも使えるので少しずつ回帰テスト用のツールとして使っていこうと思っている。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>XPとアンチパターンと自動化テスト</title>
      <link>http://d.tflare.com/2006/07/03/234500/</link>
      <pubDate>Mon, 03 Jul 2006 14:45:00 +0000</pubDate>
      
      <guid>http://d.tflare.com/2006/07/03/234500/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;div data-role=&#34;amazonjs&#34; data-asin=&#34;4894717565&#34; data-locale=&#34;JP&#34; data-tmpl=&#34;&#34; data-img-size=&#34;&#34; class=&#34;asin_4894717565_JP_ amazonjs_item&#34;&gt;
    &lt;div class=&#34;amazonjs_indicator&#34;&gt;
      &lt;span class=&#34;amazonjs_indicator_img&#34;&gt;&lt;/span&gt;&lt;a class=&#34;amazonjs_indicator_title&#34; href=&#34;#&#34;&gt;XPエクストリームプログラミング懐疑編―XPはソフトウェア開発の救世主たりえるのか (The XP Series)&lt;/a&gt;&lt;span class=&#34;amazonjs_indicator_footer&#34;&gt;&lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;&lt;/p&gt; 
  
  &lt;p&gt;
    XPエクストリームプログラミング懐疑編―XPはソフトウェア開発の救世主たりえるのか (The XP Series)を読み返した。
  &lt;/p&gt;
  
  &lt;p&gt;
    XPは自分の困ったことがあるアンチパターンにも対処してくれている気がする。
  &lt;/p&gt;
  
  &lt;pre&gt;
アンチパターン　自業自得
他の人にもわかりやすくするため、難しい技術を使わないようにする。それに伴いコード行数が増える。
　　　　　　　　　　　↓
難しい技術を使わなくてはどうにもならないような状況が発生する。
　　　　　　　　　　　↓
その部分だけ難しい技術を使って作る。
　　　　　　　　　　　↓
結局自分しか修正しないことに気づく。
　　　　　　　　　　　↓
その後の修正では難しい技術をどんどん投入する。
　　　　　　　　　　　↓
難しい技術を使っていれば5行ですむところを他の人にもわかりやすくした結果
50行になってしまったため後で自分の保守が大変になる。
　　　　　　　　　　　↓
その当時使った言語を使うのがいやなので、修正する気にならない
ここでいう難しい技術というのは、他のチームメンバーでは使えなさそうな技術というだけで
実際に難しい技術かどうかは関係ありません。
&lt;/pre&gt;
  
  &lt;p&gt;
    こんなことにかなり前にはまったため、今でも時々悩まされる。
  &lt;/p&gt;
  
  &lt;p&gt;
    テストさえ書いておけば。
  &lt;/p&gt;
  
  &lt;p&gt;
    ペアプロしておけば。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    すべてのプロジェクトにXPは有効ではないけど
  &lt;/p&gt;
  
  &lt;p&gt;
    ほぼすべてのプロジェクトに自動化テストは有効に働くと思う。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    余計なプロセスを追加するより、自動化テストを入れたほうが
  &lt;/p&gt;
  
  &lt;p&gt;
    品質向上に寄与すると思うよ。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>JspWiki</title>
      <link>http://d.tflare.com/2006/06/28/221913/</link>
      <pubDate>Wed, 28 Jun 2006 13:19:13 +0000</pubDate>
      
      <guid>http://d.tflare.com/2006/06/28/221913/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    JSPのみでWikiを書いた
  &lt;/p&gt;
  
  &lt;p&gt;
    Wikiと言っても
  &lt;/p&gt;
  
  &lt;p&gt;
    一覧表示、読み込み、書き込み、削除、検索の機能しかなく
  &lt;/p&gt;
  
  &lt;p&gt;
    リンク機能なんてまったくない。
  &lt;/p&gt;
  
  &lt;p&gt;
    大体300行ぐらい。
  &lt;/p&gt;
  
  &lt;p&gt;
    JSPだとコンパイルを勝手にやってくれるので楽。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    とりあえずはまったこと。
  &lt;/p&gt;
  
  &lt;p&gt;
    環境:Windows+Apache+Tomcat+InternetExpoler
  &lt;/p&gt;
  
  &lt;p&gt;
    文字コードをEUC-JPにしていたが
  &lt;/p&gt;
  
  &lt;p&gt;
    ファイル名を日本語のまま格納すると、
  &lt;/p&gt;
  
  &lt;p&gt;
    書き込みはうまくいくが、
  &lt;/p&gt;
  
  &lt;p&gt;
    読み込む際にInternetExpolerがうまく処理してくれず
  &lt;/p&gt;
  
  &lt;p&gt;
    文字が1文字落ちてしまってうまくいかない。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    前にRubyでWikiを作ったときにも同じような事象が起きた。
  &lt;/p&gt;
  
  &lt;p&gt;
    その時はエスケープしたが、
  &lt;/p&gt;
  
  &lt;p&gt;
    今回はWindows+InternetExpoler限定なので
  &lt;/p&gt;
  
  &lt;p&gt;
    文字コードをShift_JISにしたらうまくいくんじゃないかと思って
  &lt;/p&gt;
  
  &lt;p&gt;
    やってみたらうまくいった。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    今回JSP（Java）でアプリを作ったのが
  &lt;/p&gt;
  
  &lt;p&gt;
    初めてだったためデバッカーを使わずに
  &lt;/p&gt;
  
  &lt;p&gt;
    変数の値を知る方法がわからず大変だった。
  &lt;/p&gt;
  
  &lt;p&gt;
    Rubyだと
  &lt;/p&gt;
  
  &lt;p&gt;
    raise StandardError,foo
  &lt;/p&gt;
  
  &lt;p&gt;
    とするとできる。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    JSPの場合
  &lt;/p&gt;
  
  &lt;p&gt;
    System.out.println(foo);
  &lt;/p&gt;
  
  &lt;p&gt;
    とするとTomcatのコンソールに値が出力される
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Action Controllerのマッピング</title>
      <link>http://d.tflare.com/2006/06/01/233025/</link>
      <pubDate>Thu, 01 Jun 2006 14:30:25 +0000</pubDate>
      
      <guid>http://d.tflare.com/2006/06/01/233025/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    mod_rewriteの代わりに使えるわけねー
  &lt;/p&gt;
  
  &lt;p&gt;
    というかmod_rewriteがないと下記のようなアドレスでcgiが見つからなくてNot Foundで終わりじゃん
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.hoge.net/diary/2006/06/02/&#34; target=&#34;_blank&#34;&gt;http://www.hoge.net/diary/2006/06/02/&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    なにを考えてるんだろう。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Action Controllerのマッピングをちょっと調べてみたら
  &lt;/p&gt;
  
  &lt;p&gt;
    基本的にREQUEST_URIを元にマッピングしてる
  &lt;/p&gt;
  
  &lt;p&gt;
    いろいろと省略可能だったり
  &lt;/p&gt;
  
  &lt;p&gt;
    オプションがいろいろついていたりしているので複雑になっている。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Haskellプログラミング入門（5）場合分け</title>
      <link>http://d.tflare.com/2006/03/27/230536/</link>
      <pubDate>Mon, 27 Mar 2006 14:05:36 +0000</pubDate>
      
      <guid>http://d.tflare.com/2006/03/27/230536/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    Haskellのソースを読んでいても意味がわからない部分がまだ多い。
  &lt;/p&gt;
  
  &lt;p&gt;
    少しずつやっていこうということで、今日は場合分けを勉強した。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://web.archive.org/web/20050216040914/www.teu.ac.jp/kougi/koshida/Prog6/text02.html&#34; target=&#34;_blank&#34;&gt;http://web.archive.org/web/20050216040914/www.teu.ac.jp/kougi/koshida/Prog6/text02.html&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    上記を参考にして2引数をとり最小の値を返す関数が以下になる。
  &lt;/p&gt;
  
  &lt;pre&gt;
mymin :: Int -&amp;#62; Int -&amp;#62; Int
mymin x y
| x &amp;#60;= y      = x -- まずこれを評価条件に当てはまればx
| otherwise   = y -- 上記以外ならy
以下のようにもかける
mymin2 :: Int -&amp;#62; Int -&amp;#62; Int
mymin2 x y = if x &amp;#60;= y then x else y
&lt;/pre&gt;
  
  &lt;p&gt;
    3引数をとり最小の値を返す関数が以下になる。
  &lt;/p&gt;
  
  &lt;pre&gt;
mymin3 :: Int -&amp;#62; Int -&amp;#62; Int -&amp;#62; Int
mymin3 x y z
| (x &amp;#60;= y) &amp;#38;&amp;#38; (x &amp;#60;= z)    = x
| y &amp;#60;= z                  = y
| otherwise               = z
&lt;/pre&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    この場合分けは理解できればわかりやすいんだけど
  &lt;/p&gt;
  
  &lt;p&gt;
    始めてみた時は、これは分岐してるのか？
  &lt;/p&gt;
  
  &lt;p&gt;
    いったい何なんだ？という程度しか分からなかった。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    少しずつソースが読めるようになってきた気がするので
  &lt;/p&gt;
  
  &lt;p&gt;
    頑張っていきたい。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Haskellプログラミング入門（4）reverse</title>
      <link>http://d.tflare.com/2006/03/21/203150/</link>
      <pubDate>Tue, 21 Mar 2006 11:31:50 +0000</pubDate>
      
      <guid>http://d.tflare.com/2006/03/21/203150/</guid>
      <description>&lt;div class=&#34;section&#34;&gt;
  &lt;p&gt;
    Haskellプログラミング入門（3）reverseを書いて見ようの続き
  &lt;/p&gt;
  
  &lt;p&gt;
    reverseは標準で意味されてるけど。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.sampou.org/haskell/report-revised-j/basic.html&#34; target=&#34;_blank&#34;&gt;http://www.sampou.org/haskell/report-revised-j/basic.html&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    上記6.1.2 文字と文字列から
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      文字列は文字のリストである。
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://web.archive.org/web/20050216042941/www.teu.ac.jp/kougi/koshida/Prog6/text05.html&#34; target=&#34;_blank&#34;&gt;http://web.archive.org/web/20050216042941/www.teu.ac.jp/kougi/koshida/Prog6/text05.html&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    上記2.2.1　リストの構築子から
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      全てのリストは，空リスト（[]）であるか，空でないかのいずれかである．空でないリスト（例：[4,2,3]）は，x:xsの書式で表すことができる．ここで，xは先頭要素，xsは，先頭要素を除いた，リストの残りを表す．
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;pre&gt;
myr :: String -&amp;#62; String
myr &amp;#91;] = &amp;#91;]
myr (x:xs) = myr (xs) ++ &amp;#91;x]
&lt;/pre&gt;
  
  &lt;p&gt;
    ということでこれでいいのか？
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://web.archive.org/web/20050216042941/www.teu.ac.jp/kougi/koshida/Prog6/text05.html&#34; target=&#34;_blank&#34;&gt;http://web.archive.org/web/20050216042941/www.teu.ac.jp/kougi/koshida/Prog6/text05.html&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    上記のリストに関する基本再帰を使うから空リストが必要。
  &lt;/p&gt;
  
  &lt;p&gt;
    それから再帰すると出来る。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.sampou.org/haskell/report-revised-j/standard-prelude.html#preludelist&#34; target=&#34;_blank&#34;&gt;http://www.sampou.org/haskell/report-revised-j/standard-prelude.html#preludelist&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    上記によると以下のようになっている。
  &lt;/p&gt;
  
  &lt;p&gt;
    まだまだHaskellの基本的なことがわかってない。
  &lt;/p&gt;
  
  &lt;p&gt;
    再帰を自分でせずに標準関数を使えばいいのか。
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      reverse :: [a] -&gt; [a]
    &lt;/p&gt;
    
    &lt;p&gt;
      reverse = foldl (flip (:)) []
    &lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
